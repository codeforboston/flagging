from typing import List

from flask_admin import BaseView as _BaseView
from flask_admin.contrib import sqla

from app.admin.auth import basic_auth
from app.data.globals import cache


class BaseView(_BaseView):
    """All admin views should inherit from here. This base view adds required
    authorization to everything on the admin panel. It also prepends the
    blueprints generated by Flask-Admin with "admin_".
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.endpoint != 'admin':
            self.url = self.url or self.endpoint
            self.endpoint = f'admin_{self.endpoint}'

    def is_accessible(self) -> bool:
        return basic_auth.authenticate()

    def inaccessible_callback(self, name, **kwargs):
        """Ask for credentials when access fails."""
        return basic_auth.get_login()


class ModelView(sqla.ModelView, BaseView):
    """Base Admin view for SQLAlchemy models."""
    can_export = True
    export_types = ['csv']
    create_modal = True
    edit_modal = True

    def __init__(
            self,
            model,
            session,
            *args,
            ignore_columns: List[str] = None,
            **kwargs
    ):
        # Show all columns in form except any in `ignore_columns`
        self.column_list = [
            c.key for c in model.__table__.columns
            if c.key not in (ignore_columns or [])
        ]
        self.form_columns = self.column_list
        super().__init__(model, session, *args, **kwargs)

    def after_model_change(self, *args, **kwargs):
        super().after_model_change(*args, **kwargs)
        cache.clear()
